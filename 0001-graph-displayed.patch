From 059572a5182ca9c2414737a8a0b3c4ac15cb30d6 Mon Sep 17 00:00:00 2001
From: sharan <sharanshanmugam7@gmail.com>
Date: Sun, 25 Feb 2024 16:18:43 +0530
Subject: [PATCH] graph displayed

---
 src/App.tsx   | 28 ----------------------------
 src/Graph.tsx | 22 ----------------------
 2 files changed, 50 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index ad8f339..bb9c058 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,42 +2,23 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
-
-/**
- * State declaration for <App />
- */
 interface IState {
   data: ServerRespond[],
   showGraph:boolean
 }
-
-/**
- * The parent element of the react app.
- * It renders title, button and Graph react element.
- */
 class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
 
     this.state = {
-      // data saves the server responds.
-      // We use this state to parse data down to the child element (Graph) as element property
       data: [],
       showGraph: false,
     };
   }
-
-  /**
-   * Render Graph react component with state.data parse as property data
-   */
   renderGraph() {
     if(this.state.showGraph)
       return (<Graph data={this.state.data}/>)
   }
-
-  /**
-   * Get new data from server and update the state with the new data
-   */
   getDataFromServer() {
     let x = 0;
         const interval = setInterval(() => {
@@ -54,10 +35,6 @@ class App extends Component<{}, IState> {
         }, 100);
     
   }
-
-  /**
-   * Render the App react component
-   */
   render() {
     return (
       <div className="App">
@@ -66,11 +43,6 @@ class App extends Component<{}, IState> {
         </header>
         <div className="App-content">
           <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
           </button>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 2e2b677..351f838 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -2,28 +2,14 @@ import React, { Component } from 'react';
 import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
-
-/**
- * Props declaration for <Graph />
- */
 interface IProps {
   data: ServerRespond[],
 }
 
-/**
- * Perspective library adds load to HTMLElement prototype.
- * This interface acts as a wrapper for Typescript compiler.
- */
 interface PerspectiveViewerElement extends HTMLElement  {
   load: (table: Table) => void,
 }
-
-/**
- * React component that renders Perspective based on data
- * parsed from its parent through data property.
- */
 class Graph extends Component<IProps, {}> {
-  // Perspective table
   table: Table | undefined;
 
   render() {
@@ -31,7 +17,6 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
@@ -45,9 +30,6 @@ class Graph extends Component<IProps, {}> {
       this.table = window.perspective.worker().table(schema);
     }
     if (this.table) {
-      // Load the `table` in the `<perspective-viewer>` DOM reference.
-
-      // Add more Perspective configurations here.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
       elem.setAttribute('column-pivots', '["stock"]');
@@ -58,12 +40,8 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidUpdate() {
-    // Everytime the data props is updated, insert the data into Perspective table
     if (this.table) {
-      // As part of the task, you need to fix the way we update the data props to
-      // avoid inserting duplicated entries into Perspective table again.
       this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
         return {
           stock: el.stock,
           top_ask_price: el.top_ask && el.top_ask.price || 0,
-- 
2.43.0.windows.1

